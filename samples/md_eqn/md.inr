
## Read in sequence of octets
#
INP = :slurp_octets c.md;
#

Octet = INP :alph;

Octets = Octet*;
Copy_Octets = Octets $ (0,0);

#
## Quote block marked with greater than, 5 spaces ... and newline
#

QBL_Constraint = Octet+  -  Octets '\n'  Octets;
QBL_block = '>     '  Copy_Octets '\n'   @@ QBL_Constraint;

#
## Inline block marked with single backticks
## Inline block marked with double backticks
#

SBT_Constraint = Octet+  -  Octets '`'  Octets;
DBT_Constraint = Octet+  -  Octets '``' Octets;
SBT_block = '`'  Copy_Octets '`'   @@ SBT_Constraint;
DBT_block = '``' Copy_Octets '``'  @@ DBT_Constraint;

#
## Inline block marked with single dollar signs
## Inline block marked with double dollar signs
#

SDS_Constraint = Octet+  -  Octets '$'  Octets;
DDS_Constraint = Octet+  -  Octets '$$' Octets;
SDS_block = '$'  Copy_Octets '$'   @@ SDS_Constraint;
DDS_block = '$$' Copy_Octets '$$'  @@ DDS_Constraint;

#
## Text with no bare backticks, dollar signs or verbatim quotes
#

Background = Octets  -  Octets { '`', '$', '>     ' } Octets;

#
## Assemble the pieces
#

QBL = QBL_block  $ (0,0);
SBT = SBT_block  $ (0,0);
DBT = DBT_block  $ (0,0);
BRK = Background $ (0,0);

SDS = [ '[[[' ] SDS_block [ ']]]' ];
DDS = [ '[[[' ] DDS_block [ ']]]' ];


Blocks = { QBL, SBT, DBT, SDS, DDS };
Process = ( BRK Blocks )* BRK;

# Ending = { '`', '``', '$', '$$' }?;
Ending = ^;

WRK = INP Ending @ Process;

#
## Select shortest output
## Write out as sequence of octets
#
OUT = WRK :gen_min;
OUT :spit_octets trans.md;

